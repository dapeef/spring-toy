(()=>{"use strict";var t;!function(t){t[t.Triangle=0]="Triangle",t[t.Parallelogram=1]="Parallelogram",t[t.Square=2]="Square",t[t.CenteredSquare=3]="CenteredSquare"}(t||(t={}));var i,s=function(){function t(t,i){void 0===t&&(t=0),void 0===i&&(i=0),this.x=t,this.y=i}return t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.prototype.subtract=function(t){this.x-=t.x,this.y-=t.y},t.prototype.multiplyBy=function(t){this.x*=t,this.y*=t},t.prototype.normalize=function(){this.multiplyBy(1/this.length())},t.prototype.plus=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.minus=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.times=function(i){return new t(this.x*i,this.y*i)},t.prototype.length=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))},t.prototype.normalized=function(){return 0===this.length()?this:this.times(1/this.length())},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.clamp=function(t){this.length()>t&&(this.normalize(),this.multiplyBy(t))},t.prototype.copy=function(){return new t(this.x,this.y)},t}(),e=(i=function(t,s){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])},i(t,s)},function(t,s){if("function"!=typeof s&&null!==s)throw new TypeError("Class extends value "+String(s)+" is not a constructor or null");function e(){this.constructor=t}i(t,s),t.prototype=null===s?Object.create(s):(e.prototype=s.prototype,new e)}),n=function(){function t(t,i,e,n,o,h){void 0===t&&(t=new s(25,25)),void 0===i&&(i=1),void 0===e&&(e=1e-7),void 0===n&&(n=1),void 0===o&&(o=new s(50,50)),void 0===h&&(h=5e-4),this._position=t,this.mass=i,this.stiffness=e,this.damping=n,this._size=o,this.dragCoefficient=h,this.isBeingDragged=!1,this.relativeMousePosition=new s,this.springs=[],this._velocity=new s}return Object.defineProperty(t.prototype,"position",{get:function(){return this._position},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"velocity",{get:function(){return this._velocity},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this._size},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return this._position.x-this._size.x/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this._position.x+this._size.x/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return this._position.y-this._size.y/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bottom",{get:function(){return this._position.y+this._size.y/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"minSize",{get:function(){return Math.min(this._size.x,this._size.y)},enumerable:!1,configurable:!0}),t.prototype.addSpring=function(t){this.springs.push(t)},t.prototype.update=function(i,e,n,o,r,a){var p=this;if(this.isBeingDragged){var d=this._position.copy();this._position=n.minus(this.relativeMousePosition),this._velocity=this._position.minus(d).times(1/e)}else{var u=new s;u.add(new s(0,this.mass*o)),this.springs.forEach((function(t){u.add(t.getForce(p))}));var c=[];this.left<=0&&c.push(new h(this,new t(new s(-this._size.x/2,this._position.y)),this._size.x)),this.right>=i.width&&c.push(new h(this,new t(new s(i.width+this._size.x/2,this._position.y)),this._size.x)),this.top<=0&&c.push(new h(this,new t(new s(this._position.x,-this._size.y/2)),this._size.y)),this.bottom>=i.height&&c.push(new h(this,new t(new s(this._position.x,i.height+this._size.y/2)),this._size.y)),c.forEach((function(t){u.add(t.getForce(p))})),u.add(this._velocity.normalized().times(-this.dragCoefficient*Math.pow(this._velocity.length(),2)));var l=u.times(1/this.mass);this._velocity.add(l.times(e)),this._velocity.clamp(a),this._position.add(this._velocity.times(e)),this.right<=0&&(this._velocity.x=0,this._position.x=-this.size.x/2+1),this.left>=i.width&&(this._velocity.x=0,this._position.x=i.width+this.size.x/2-1),this.bottom<=0&&(this._velocity.y=0,this._position.y=-this.size.y/2+1),this.top>=i.height&&(this._velocity.y=0,this._position.y=i.height+this.size.y/2-1)}},t.prototype.draw=function(t){t.strokeStyle="black",t.beginPath(),t.ellipse(this._position.x,this._position.y,this._size.x/2,this._size.y/2,0,0,2*Math.PI),t.fill()},t}(),o=function(){function t(t,i,e,n,o){void 0===e&&(e=200),void 0===n&&(n=1e-4),void 0===o&&(o=.001),this.mass1=t,this.mass2=i,this.naturalLength=e,this.stiffness=n,this.damping=o,this.length=0,this.relativePos=new s,this.elasticForce=new s,this.dampingForce=new s,this.force=new s,this.defaultWidth=10,this.update()}return t.prototype.getForce=function(t){return t===this.mass2?this.force:this.force.times(-1)},t.prototype.update=function(){this.relativePos=this.mass1.position.minus(this.mass2.position),this.length=this.relativePos.length();var t=this.relativePos.normalized();this.elasticForce=t.times((this.length-this.naturalLength)*this.stiffness);var i=this.mass1.velocity.minus(this.mass2.velocity).dot(t);this.dampingForce=t.times(i*this.damping),this.force=this.elasticForce.plus(this.dampingForce)},t.prototype.draw=function(t){t.beginPath(),t.moveTo(this.mass1.position.x,this.mass1.position.y),t.lineTo(this.mass2.position.x,this.mass2.position.y),t.lineWidth=Math.min(this.defaultWidth*this.naturalLength/this.length,this.mass1.minSize,this.mass2.minSize),t.strokeStyle="gray",t.stroke()},t}(),h=function(t){function i(i,s,e,n,o){void 0===n&&(n=1e-5),void 0===o&&(o=.01);var h=t.call(this,s,i,e,n,o)||this;return h.mass1=i,h.mass2=s,h.naturalLength=e,h.stiffness=n,h.damping=o,h.hertzExponent=2,h.penaltyExponent=.5,h.update(),h}return e(i,t),i.prototype.update=function(){this.relativePos=this.mass1.position.minus(this.mass2.position),this.length=this.relativePos.length();var t=this.relativePos.normalized(),i=Math.pow(this.naturalLength-this.length,this.hertzExponent)*this.stiffness,s=1+1/Math.pow(this.length,this.penaltyExponent);this.elasticForce=t.times(i*s).times(-1);var e=this.mass1.velocity.minus(this.mass2.velocity).dot(t);this.dampingForce=t.times(e*this.damping),this.force=this.elasticForce.plus(this.dampingForce)},i}(o),r=function(){function i(t){this.canvas=t,this.mousePosition=new s,this.maxDeltaTime=50,this.gravity=5e-4,this.maxForce=.1,this.maxSpeed=1e4,this.ctx=t.getContext("2d"),this.lastTime=0,this.deltaTime=0,this.masses=[],this.springs=[]}return i.prototype.addMass=function(t){this.masses.push(t)},i.prototype.addSpring=function(t){this.springs.push(t),t.mass1.addSpring(t),t.mass2.addSpring(t)},i.prototype.mouseDown=function(t){var i=this;this.mousePosition.x=t.x,this.mousePosition.y=t.y,this.masses.forEach((function(s){s.position.x-s.size.x<=t.x&&s.position.x+s.size.x>=t.x&&s.position.y-s.size.y<=t.y&&s.position.y+s.size.y>=t.y&&(s.isBeingDragged=!0,s.relativeMousePosition=i.mousePosition.minus(s.position))}))},i.prototype.mouseMove=function(t){this.mousePosition.x=t.x,this.mousePosition.y=t.y},i.prototype.mouseUp=function(t){this.masses.forEach((function(t){return t.isBeingDragged=!1}))},i.prototype.createDemo=function(i){if(i===t.Triangle){var e=new n(new s(15,30)),h=new n(new s(30,300)),r=new n(new s(300,30));this.addMass(e),this.addMass(h),this.addMass(r);var a=new o(e,h),p=new o(h,r),d=new o(e,r);this.addSpring(a),this.addSpring(p),this.addSpring(d)}if(i===t.Parallelogram){e=new n(new s(30,30)),h=new n(new s(30,300)),r=new n(new s(300,30));var u=new n(new s(300,300));this.addMass(e),this.addMass(h),this.addMass(r),this.addMass(u),a=new o(e,h),p=new o(h,r),d=new o(e,r);var c=new o(r,u),l=new o(h,u);this.addSpring(a),this.addSpring(p),this.addSpring(d),this.addSpring(c),this.addSpring(l)}if(i===t.Square){e=new n(new s(30,30)),h=new n(new s(30,300)),r=new n(new s(300,30)),u=new n(new s(300,300)),this.addMass(e),this.addMass(h),this.addMass(r),this.addMass(u),a=new o(e,h),p=new o(e,u,200*Math.sqrt(2)),d=new o(h,u),c=new o(r,u),l=new o(e,r);var m=new o(h,r,200*Math.sqrt(2));this.addSpring(a),this.addSpring(p),this.addSpring(d),this.addSpring(c),this.addSpring(l),this.addSpring(m)}if(i===t.CenteredSquare){e=new n(new s(30,30)),h=new n(new s(30,300)),r=new n(new s(300,30)),u=new n(new s(300,300));var y=new n(new s(150,150));this.addMass(e),this.addMass(h),this.addMass(r),this.addMass(u),this.addMass(y),a=new o(e,h),p=new o(e,r),d=new o(h,u),c=new o(r,u),l=new o(e,y,100*Math.sqrt(2)),m=new o(h,y,100*Math.sqrt(2));var f=new o(r,y,100*Math.sqrt(2)),g=new o(u,y,100*Math.sqrt(2));this.addSpring(a),this.addSpring(p),this.addSpring(d),this.addSpring(c),this.addSpring(l),this.addSpring(m),this.addSpring(f),this.addSpring(g)}},i.prototype.start=function(){requestAnimationFrame(this.mainLoop.bind(this))},i.prototype.mainLoop=function(t){this.deltaTime=Math.min(t-this.lastTime,this.maxDeltaTime),this.lastTime=t,this.update(this.deltaTime),this.draw(),requestAnimationFrame(this.mainLoop.bind(this))},i.prototype.update=function(t){var i=this;this.masses.forEach((function(s){return s.update(i.canvas,t,i.mousePosition,i.gravity,i.maxForce,i.maxSpeed)})),this.springs.forEach((function(t){return t.update()}))},i.prototype.draw=function(){var t=this;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.springs.forEach((function(i){return i.draw(t.ctx)})),this.masses.forEach((function(i){return i.draw(t.ctx)}))},i}(),a=document.getElementById("canvas");function p(){a.width=window.innerWidth,a.height=window.innerHeight}window.addEventListener("resize",p),p();var d=new r(a);a.onmousedown=d.mouseDown.bind(d),a.onmousemove=d.mouseMove.bind(d),a.onmouseup=d.mouseUp.bind(d);var u=Math.floor(Math.random()*Object.keys(t).length/2);d.createDemo(u),d.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,