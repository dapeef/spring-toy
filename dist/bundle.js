(()=>{"use strict";var t;!function(t){t[t.Triangle=0]="Triangle",t[t.Parallelogram=1]="Parallelogram",t[t.Square=2]="Square",t[t.CenteredSquare=3]="CenteredSquare",t[t.Hexagon=4]="Hexagon"}(t||(t={}));var i,s=function(){function t(t,i){void 0===t&&(t=0),void 0===i&&(i=0),this.x=t,this.y=i}return t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.prototype.subtract=function(t){this.x-=t.x,this.y-=t.y},t.prototype.multiplyBy=function(t){this.x*=t,this.y*=t},t.prototype.normalize=function(){this.multiplyBy(1/this.length())},t.prototype.plus=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.minus=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.times=function(i){return new t(this.x*i,this.y*i)},t.prototype.length=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))},t.prototype.normalized=function(){return 0===this.length()?this:this.times(1/this.length())},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.clamp=function(t){this.length()>t&&(this.normalize(),this.multiplyBy(t))},t.prototype.copy=function(){return new t(this.x,this.y)},t}(),e=(i=function(t,s){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])},i(t,s)},function(t,s){if("function"!=typeof s&&null!==s)throw new TypeError("Class extends value "+String(s)+" is not a constructor or null");function e(){this.constructor=t}i(t,s),t.prototype=null===s?Object.create(s):(e.prototype=s.prototype,new e)}),n=function(){function t(t,i,e,n,o,h){void 0===t&&(t=new s(25,25)),void 0===i&&(i=1),void 0===e&&(e=1e-7),void 0===n&&(n=1),void 0===o&&(o=new s(50,50)),void 0===h&&(h=5e-4),this._position=t,this.mass=i,this.stiffness=e,this.damping=n,this._size=o,this.dragCoefficient=h,this.isBeingDragged=!1,this.relativeMousePosition=new s,this.springs=[],this.entitySprings=[],this._velocity=new s}return Object.defineProperty(t.prototype,"position",{get:function(){return this._position},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"velocity",{get:function(){return this._velocity},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this._size},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return this._position.x-this._size.x/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this._position.x+this._size.x/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return this._position.y-this._size.y/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bottom",{get:function(){return this._position.y+this._size.y/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"minSize",{get:function(){return Math.min(this._size.x,this._size.y)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxSize",{get:function(){return Math.max(this._size.x,this._size.y)},enumerable:!1,configurable:!0}),t.prototype.addSpring=function(t){this.springs.push(t)},t.prototype.addEntitySpring=function(t){this.entitySprings.push(t)},t.prototype.update=function(i,e,n,o,r,a,p){var d=this;if(this.isBeingDragged){var u=this._position.copy();this._position=n.minus(this.relativeMousePosition),this._velocity=this._position.minus(u).times(1/e)}else{var c=new s;c.add(new s(0,this.mass*r)),this.springs.forEach((function(t){c.add(t.getForce(d))}));var m=[];this.left<=0&&m.push(new h(this,new t(new s(-this._size.x/2,this._position.y)),this._size.x)),this.right>=i.width&&m.push(new h(this,new t(new s(i.width+this._size.x/2,this._position.y)),this._size.x)),this.top<=0&&m.push(new h(this,new t(new s(this._position.x,-this._size.y/2)),this._size.y)),this.bottom>=i.height&&m.push(new h(this,new t(new s(this._position.x,i.height+this._size.y/2)),this._size.y)),m.forEach((function(t){c.add(t.getForce(d))})),this.entitySprings.forEach((function(t){c.add(t.getForce(d))})),c.add(this._velocity.normalized().times(-this.dragCoefficient*Math.pow(this._velocity.length(),2)));var y=c.times(1/this.mass);this._velocity.add(y.times(e)),this._velocity.clamp(p),this._position.add(this._velocity.times(e)),this.right<=0&&(this._velocity.x=0,this._position.x=-this.size.x/2+1),this.left>=i.width&&(this._velocity.x=0,this._position.x=i.width+this.size.x/2-1),this.bottom<=0&&(this._velocity.y=0,this._position.y=-this.size.y/2+1),this.top>=i.height&&(this._velocity.y=0,this._position.y=i.height+this.size.y/2-1)}},t.prototype.draw=function(t){t.strokeStyle="black",t.beginPath(),t.ellipse(this._position.x,this._position.y,this._size.x/2,this._size.y/2,0,0,2*Math.PI),t.fill()},t}(),o=function(){function t(t,i,e,n,o){void 0===e&&(e=200),void 0===n&&(n=1e-4),void 0===o&&(o=.001),this.mass1=t,this.mass2=i,this.naturalLength=e,this.stiffness=n,this.damping=o,this.length=0,this.relativePos=new s,this.elasticForce=new s,this.dampingForce=new s,this.force=new s,this.defaultWidth=10,this.update()}return t.prototype.getForce=function(t){return t===this.mass2?this.force:this.force.times(-1)},t.prototype.update=function(){this.relativePos=this.mass1.position.minus(this.mass2.position),this.length=this.relativePos.length();var t=this.relativePos.normalized();this.elasticForce=t.times((this.length-this.naturalLength)*this.stiffness);var i=this.mass1.velocity.minus(this.mass2.velocity).dot(t);this.dampingForce=t.times(i*this.damping),this.force=this.elasticForce.plus(this.dampingForce)},t.prototype.draw=function(t){t.beginPath(),t.moveTo(this.mass1.position.x,this.mass1.position.y),t.lineTo(this.mass2.position.x,this.mass2.position.y),t.lineWidth=Math.min(this.defaultWidth*this.naturalLength/this.length,this.mass1.minSize,this.mass2.minSize),t.strokeStyle="gray",t.stroke()},t}(),h=function(t){function i(i,s,e,n,o){void 0===n&&(n=1e-5),void 0===o&&(o=.01);var h=t.call(this,s,i,e,n,o)||this;return h.mass1=i,h.mass2=s,h.naturalLength=e,h.stiffness=n,h.damping=o,h.hertzExponent=2,h.penaltyExponent=.5,h.update(),h}return e(i,t),i.prototype.update=function(){this.relativePos=this.mass1.position.minus(this.mass2.position),this.length=this.relativePos.length();var t=this.relativePos.normalized();if(this.length<this.naturalLength){var i=Math.pow(this.naturalLength-this.length,this.hertzExponent)*this.stiffness,e=1+1/Math.pow(this.length,this.penaltyExponent);this.elasticForce=t.times(i*e).times(-1);var n=this.mass1.velocity.minus(this.mass2.velocity).dot(t);this.dampingForce=t.times(n*this.damping),this.force=this.elasticForce.plus(this.dampingForce)}else this.force=new s},i}(o),r=function(){function i(t){this.canvas=t,this.mousePosition=new s,this.maxDeltaTime=50,this.gravity=5e-4,this.maxForce=.1,this.maxSpeed=1e4,this.ctx=t.getContext("2d"),this.lastTime=0,this.deltaTime=0,this.masses=[],this.springs=[],this.entitySprings=[]}return i.prototype.addMass=function(t){var i=this;this.masses.forEach((function(s){var e=new h(s,t,s.maxSize/2+t.maxSize/2);i.entitySprings.push(e),s.addEntitySpring(e),t.addEntitySpring(e)})),this.masses.push(t)},i.prototype.addSpring=function(t){this.springs.push(t),t.mass1.addSpring(t),t.mass2.addSpring(t)},i.prototype.mouseDown=function(t){var i=this;this.mousePosition.x=t.x,this.mousePosition.y=t.y;var s=[];if(this.masses.forEach((function(i){i.position.x-i.size.x<=t.x&&i.position.x+i.size.x>=t.x&&i.position.y-i.size.y<=t.y&&i.position.y+i.size.y>=t.y&&s.push(i)})),s.length>0){var e=s[0],n=1/0;s.forEach((function(t){i.mousePosition.minus(t.position).length()<n&&(e=t,n=i.mousePosition.minus(t.position).length())})),e.isBeingDragged=!0,e.relativeMousePosition=this.mousePosition.minus(e.position)}},i.prototype.mouseMove=function(t){this.mousePosition.x=t.x,this.mousePosition.y=t.y},i.prototype.mouseUp=function(t){this.masses.forEach((function(t){return t.isBeingDragged=!1}))},i.prototype.createDemo=function(i){if(i===t.Triangle){var e=new n(new s(15,30)),h=new n(new s(30,300)),r=new n(new s(300,30));this.addMass(e),this.addMass(h),this.addMass(r);var a=new o(e,h),p=new o(h,r),d=new o(e,r);this.addSpring(a),this.addSpring(p),this.addSpring(d)}if(i===t.Parallelogram){e=new n(new s(30,30)),h=new n(new s(30,300)),r=new n(new s(300,30));var u=new n(new s(300,300));this.addMass(e),this.addMass(h),this.addMass(r),this.addMass(u),a=new o(e,h),p=new o(h,r),d=new o(e,r);var c=new o(r,u),m=new o(h,u);this.addSpring(a),this.addSpring(p),this.addSpring(d),this.addSpring(c),this.addSpring(m)}if(i===t.Square){e=new n(new s(30,30)),h=new n(new s(30,300)),r=new n(new s(300,30)),u=new n(new s(300,300)),this.addMass(e),this.addMass(h),this.addMass(r),this.addMass(u),a=new o(e,h),p=new o(e,u,200*Math.sqrt(2)),d=new o(h,u),c=new o(r,u),m=new o(e,r);var y=new o(h,r,200*Math.sqrt(2));this.addSpring(a),this.addSpring(p),this.addSpring(d),this.addSpring(c),this.addSpring(m),this.addSpring(y)}if(i===t.CenteredSquare){e=new n(new s(30,30)),h=new n(new s(30,300)),r=new n(new s(300,30)),u=new n(new s(300,300));var l=new n(new s(150,150));this.addMass(e),this.addMass(h),this.addMass(r),this.addMass(u),this.addMass(l),a=new o(e,h),p=new o(e,r),d=new o(h,u),c=new o(r,u),m=new o(e,l,100*Math.sqrt(2)),y=new o(h,l,100*Math.sqrt(2));var g=new o(r,l,100*Math.sqrt(2)),f=new o(u,l,100*Math.sqrt(2));this.addSpring(a),this.addSpring(p),this.addSpring(d),this.addSpring(c),this.addSpring(m),this.addSpring(y),this.addSpring(g),this.addSpring(f)}if(i===t.Hexagon){var w=new n(new s(400,400));this.addMass(w);for(var v=[],x=0;x<6;x++){var _=new n(new s(300+150*Math.cos(x*Math.PI/3),300+150*Math.sin(x*Math.PI/3)));v.push(_),this.addMass(_)}for(x=0;x<6;x++)this.addSpring(new o(v[x],v[(x+1)%6])),this.addSpring(new o(v[x],w))}},i.prototype.start=function(){requestAnimationFrame(this.mainLoop.bind(this))},i.prototype.mainLoop=function(t){this.deltaTime=Math.min(t-this.lastTime,this.maxDeltaTime),this.lastTime=t,this.update(this.deltaTime),this.draw(),requestAnimationFrame(this.mainLoop.bind(this))},i.prototype.update=function(t){var i=this;this.masses.forEach((function(s){return s.update(i.canvas,t,i.mousePosition,i.masses,i.gravity,i.maxForce,i.maxSpeed)})),this.springs.forEach((function(t){return t.update()})),this.entitySprings.forEach((function(t){return t.update()}))},i.prototype.draw=function(){var t=this;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.springs.forEach((function(i){return i.draw(t.ctx)})),this.masses.forEach((function(i){return i.draw(t.ctx)}))},i}(),a=document.getElementById("canvas");function p(){a.width=window.innerWidth,a.height=window.innerHeight}window.addEventListener("resize",p),p();var d=new r(a);a.onmousedown=d.mouseDown.bind(d),a.onmousemove=d.mouseMove.bind(d),a.onmouseup=d.mouseUp.bind(d),Math.floor(Math.random()*Object.keys(t).length/2),d.createDemo(t.Hexagon),d.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU9uRCxLQUFLb0MsT0FBT2tCLFFBRXhEdEQsS0FBSzBCLFFBQVFrQixTQUFRLFNBQUNzRixHQUFXLE9BQUFBLEVBQU96RSxLQUFLLEVBQUtDLElBQWpCLElBQ2pDMUQsS0FBS3VDLE9BQU9LLFNBQVEsU0FBQ3pCLEdBQVMsT0FBQUEsRUFBS3NDLEtBQUssRUFBS0MsSUFBZixHQUNsQyxFQUNKLEVBaE9BLEdDQU10QixFQUFTK0YsU0FBU0MsZUFBZSxVQUV2QyxTQUFTQyxJQUNMakcsRUFBT2UsTUFBU21GLE9BQU9DLFdBQ3ZCbkcsRUFBT2tCLE9BQVNnRixPQUFPRSxXQUMzQixDQUVBRixPQUFPRyxpQkFBaUIsU0FBVUosR0FDbENBLElBR0EsSUFBTUssRUFBTyxJQUFJQyxFQUFLdkcsR0FFdEJBLEVBQU93RyxZQUFjRixFQUFLNUMsVUFBVWlDLEtBQUtXLEdBQ3pDdEcsRUFBT3lHLFlBQWNILEVBQUt4QyxVQUFVNkIsS0FBS1csR0FDekN0RyxFQUFPMEcsVUFBWUosRUFBS3ZDLFFBQVE0QixLQUFLVyxHQUVwQmhJLEtBQUtxSSxNQUFNckksS0FBS3NJLFNBQVdDLE9BQU9DLEtBQUt2SixHQUFVVSxPQUFTLEdBRTNFcUksRUFBS3RDLFdBQVd6RyxFQUFTMEgsU0FFekJxQixFQUFLZCxPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3ByaW5nLXRveS8uL3NyYy91dGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vc3ByaW5nLXRveS8uL3NyYy9lbnRpdGllcy50cyIsIndlYnBhY2s6Ly9zcHJpbmctdG95Ly4vc3JjL2dhbWUudHMiLCJ3ZWJwYWNrOi8vc3ByaW5nLXRveS8uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIERlbW9UeXBlIHtcclxuICAgIFRyaWFuZ2xlLFxyXG4gICAgUGFyYWxsZWxvZ3JhbSxcclxuICAgIFNxdWFyZSxcclxuICAgIENlbnRlcmVkU3F1YXJlLFxyXG4gICAgSGV4YWdvblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFZlY3RvcjIge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHg6bnVtYmVyID0gMCwgcHVibGljIHk6bnVtYmVyID0gMCkge307XHJcblxyXG4gICAgcHVibGljIGFkZCh2ZWN0b3I6VmVjdG9yMik6dm9pZCB7XHJcbiAgICAgICAgLy8gQWRkIGFub3RoZXIgVmVjdG9yMiB0byB0aGlzIFZlY3RvcjJcclxuICAgICAgICB0aGlzLnggKz0gdmVjdG9yLng7XHJcbiAgICAgICAgdGhpcy55ICs9IHZlY3Rvci55O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgc3VidHJhY3QodmVjdG9yOlZlY3RvcjIpOnZvaWQge1xyXG4gICAgICAgIC8vIFN1YnRyYWN0IGFub3RoZXIgVmVjdG9yMiBmcm9tIHRoaXMgVmVjdG9yMlxyXG4gICAgICAgIHRoaXMueCAtPSB2ZWN0b3IueDtcclxuICAgICAgICB0aGlzLnkgLT0gdmVjdG9yLnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG11bHRpcGx5Qnkoc2NhbGFyOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgLy8gU3VtIHRoaXMgVmVjdG9yMiB3aXRoIHRoZSBuZWdhdGl2ZSBvZiBhbm90aGVyIGFuZCByZXR1cm4gYSBuZXcgVmVjdG9yMiBvZiB0aGUgcmVzdWx0XHJcbiAgICAgICAgdGhpcy54ICo9IHNjYWxhclxyXG4gICAgICAgIHRoaXMueSAqPSBzY2FsYXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5vcm1hbGl6ZSgpOnZvaWQge1xyXG4gICAgICAgIHRoaXMubXVsdGlwbHlCeSgxL3RoaXMubGVuZ3RoKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwbHVzKHZlY3RvcjpWZWN0b3IyKTpWZWN0b3IyIHtcclxuICAgICAgICAvLyBTdW0gdGhpcyBWZWN0b3IyIHdpdGggYW5vdGhlciBhbmQgcmV0dXJuIGEgbmV3IFZlY3RvcjIgb2YgdGhlIHJlc3VsdFxyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnggKyB2ZWN0b3IueCwgdGhpcy55ICsgdmVjdG9yLnkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgbWludXModmVjdG9yOlZlY3RvcjIpOlZlY3RvcjIge1xyXG4gICAgICAgIC8vIFN1bSB0aGlzIFZlY3RvcjIgd2l0aCB0aGUgbmVnYXRpdmUgb2YgYW5vdGhlciBhbmQgcmV0dXJuIGEgbmV3IFZlY3RvcjIgb2YgdGhlIHJlc3VsdFxyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnggLSB2ZWN0b3IueCwgdGhpcy55IC0gdmVjdG9yLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0aW1lcyhzY2FsYXI6bnVtYmVyKTpWZWN0b3IyIHtcclxuICAgICAgICAvLyBTdW0gdGhpcyBWZWN0b3IyIHdpdGggdGhlIG5lZ2F0aXZlIG9mIGFub3RoZXIgYW5kIHJldHVybiBhIG5ldyBWZWN0b3IyIG9mIHRoZSByZXN1bHRcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54ICogc2NhbGFyLCB0aGlzLnkgKiBzY2FsYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsZW5ndGgoKTpudW1iZXIge1xyXG4gICAgICAgIC8vIEdldCBsZW5ndGggb2YgdGhlIHZlY3RvclxyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy54LCAyKSArIE1hdGgucG93KHRoaXMueSwgMikpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5vcm1hbGl6ZWQoKTpWZWN0b3IyIHtcclxuICAgICAgICBpZiAodGhpcy5sZW5ndGgoKSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWVzKDEvdGhpcy5sZW5ndGgoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkb3QodmVjdG9yOlZlY3RvcjIpOm51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueCAqIHZlY3Rvci54ICsgdGhpcy55ICogdmVjdG9yLnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYW1wKG1hZ25pdHVkZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCgpID4gbWFnbml0dWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9ybWFsaXplKClcclxuICAgICAgICAgICAgdGhpcy5tdWx0aXBseUJ5KG1hZ25pdHVkZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb3B5KCk6VmVjdG9yMiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCwgdGhpcy55KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdXRpbGl0aWVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFzcyB7XHJcbiAgICBwcml2YXRlIHNwcmluZ3M6U3ByaW5nW107XHJcbiAgICBwcml2YXRlIGVudGl0eVNwcmluZ3M6U3ByaW5nW107XHJcbiAgICBwcml2YXRlIF92ZWxvY2l0eTpWZWN0b3IyO1xyXG4gICAgcHVibGljIGlzQmVpbmdEcmFnZ2VkOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyByZWxhdGl2ZU1vdXNlUG9zaXRpb246VmVjdG9yMiA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfcG9zaXRpb246VmVjdG9yMiA9IG5ldyBWZWN0b3IyKDI1LCAyNSksIHByaXZhdGUgbWFzczpudW1iZXIgPSAxLCBwcml2YXRlIHN0aWZmbmVzczpudW1iZXIgPSAxZS03LCBwcml2YXRlIGRhbXBpbmc6bnVtYmVyID0gMWUwLCBwcml2YXRlIF9zaXplOlZlY3RvcjIgPSBuZXcgVmVjdG9yMig1MCwgNTApLCBwcml2YXRlIGRyYWdDb2VmZmljaWVudDpudW1iZXIgPSA1ZS00KSB7XHJcbiAgICAgICAgdGhpcy5zcHJpbmdzID0gW107XHJcbiAgICAgICAgdGhpcy5lbnRpdHlTcHJpbmdzID0gW107XHJcbiAgICAgICAgdGhpcy5fdmVsb2NpdHkgPSBuZXcgVmVjdG9yMigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHBvc2l0aW9uKCkgOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHZlbG9jaXR5KCkgOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmVsb2NpdHk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHNpemUoKSA6IFZlY3RvcjIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZ2V0IGxlZnQoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uLnggLSB0aGlzLl9zaXplLngvMjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgcmlnaHQoKSA6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uLnggKyB0aGlzLl9zaXplLngvMjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgdG9wKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbi55IC0gdGhpcy5fc2l6ZS55LzI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IGJvdHRvbSgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb24ueSArIHRoaXMuX3NpemUueS8yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgbWluU2l6ZSgpIDogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5fc2l6ZS54LCB0aGlzLl9zaXplLnkpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBtYXhTaXplKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLl9zaXplLngsIHRoaXMuX3NpemUueSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBhZGRTcHJpbmcoc3ByaW5nOlNwcmluZyk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5zcHJpbmdzLnB1c2goc3ByaW5nKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhZGRFbnRpdHlTcHJpbmcoc3ByaW5nOlNwcmluZyk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5lbnRpdHlTcHJpbmdzLnB1c2goc3ByaW5nKTtcclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoY2FudmFzOkhUTUxDYW52YXNFbGVtZW50LCBkZWx0YVRpbWU6bnVtYmVyLCBtb3VzZVBvc2l0aW9uOlZlY3RvcjIsIG1hc3NlczpNYXNzW10sIGdyYXZpdHk6bnVtYmVyLCBtYXhGb3JjZTpudW1iZXIsIG1heFNwZWVkOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNCZWluZ0RyYWdnZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkUG9zaXRpb24gPSB0aGlzLl9wb3NpdGlvbi5jb3B5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gbW91c2VQb3NpdGlvbi5taW51cyh0aGlzLnJlbGF0aXZlTW91c2VQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlbG9jaXR5ID0gdGhpcy5fcG9zaXRpb24ubWludXMob2xkUG9zaXRpb24pLnRpbWVzKDEvZGVsdGFUaW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgZm9yY2UgPSBuZXcgVmVjdG9yMigpO1xyXG4gICAgICAgICAgICAvLyBHcmF2aXR5XHJcbiAgICAgICAgICAgIGZvcmNlLmFkZChuZXcgVmVjdG9yMigwLCB0aGlzLm1hc3MgKiBncmF2aXR5KSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTcHJpbmdzXHJcbiAgICAgICAgICAgIHRoaXMuc3ByaW5ncy5mb3JFYWNoKHNwcmluZyA9PiB7Zm9yY2UuYWRkKHNwcmluZy5nZXRGb3JjZSh0aGlzKSl9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEJvdW5jZSBvZmYgd2FsbHNcclxuICAgICAgICAgICAgbGV0IHdhbGxTcHJpbmdzOkNvbnRhY3RTcHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0IDw9IDApICAgICAgICAgICAgICAgICB7d2FsbFNwcmluZ3MucHVzaChuZXcgQ29udGFjdFNwcmluZyh0aGlzLCBuZXcgTWFzcyhuZXcgVmVjdG9yMigtdGhpcy5fc2l6ZS54LzIgICAgICAgICAgICAgICAgLCB0aGlzLl9wb3NpdGlvbi55KSksIHRoaXMuX3NpemUueCkpfSAvLyBMZWZ0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0ID49IGNhbnZhcy53aWR0aCkgICAgIHt3YWxsU3ByaW5ncy5wdXNoKG5ldyBDb250YWN0U3ByaW5nKHRoaXMsIG5ldyBNYXNzKG5ldyBWZWN0b3IyKGNhbnZhcy53aWR0aCt0aGlzLl9zaXplLngvMiAgICAsIHRoaXMuX3Bvc2l0aW9uLnkpKSwgdGhpcy5fc2l6ZS54KSl9IC8vIFJpZ2h0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvcCA8PSAwKSAgICAgICAgICAgICAgICAgIHt3YWxsU3ByaW5ncy5wdXNoKG5ldyBDb250YWN0U3ByaW5nKHRoaXMsIG5ldyBNYXNzKG5ldyBWZWN0b3IyKHRoaXMuX3Bvc2l0aW9uLngsIC10aGlzLl9zaXplLnkvMiAgICAgICAgICAgICAgICApKSwgdGhpcy5fc2l6ZS55KSl9IC8vIFRvcFxyXG4gICAgICAgICAgICBpZiAodGhpcy5ib3R0b20gPj0gY2FudmFzLmhlaWdodCkgICB7d2FsbFNwcmluZ3MucHVzaChuZXcgQ29udGFjdFNwcmluZyh0aGlzLCBuZXcgTWFzcyhuZXcgVmVjdG9yMih0aGlzLl9wb3NpdGlvbi54LCBjYW52YXMuaGVpZ2h0K3RoaXMuX3NpemUueS8yICAgKSksIHRoaXMuX3NpemUueSkpfSAvLyBCb3R0b21cclxuICAgICAgICAgICAgd2FsbFNwcmluZ3MuZm9yRWFjaChzcHJpbmcgPT4ge2ZvcmNlLmFkZChzcHJpbmcuZ2V0Rm9yY2UodGhpcykpfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBCb3VuY2Ugb2ZmIG90aGVyIGVudGl0aWVzXHJcbiAgICAgICAgICAgIHRoaXMuZW50aXR5U3ByaW5ncy5mb3JFYWNoKHNwcmluZyA9PiB7Zm9yY2UuYWRkKHNwcmluZy5nZXRGb3JjZSh0aGlzKSl9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEFpciByZXNpc3RhbmNlXHJcbiAgICAgICAgICAgIGZvcmNlLmFkZCh0aGlzLl92ZWxvY2l0eS5ub3JtYWxpemVkKCkudGltZXMoLXRoaXMuZHJhZ0NvZWZmaWNpZW50ICogTWF0aC5wb3codGhpcy5fdmVsb2NpdHkubGVuZ3RoKCksIDIpKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDb21wdXRlIGRpZmZlcmVudGlhbCBlcXVhdGlvbnNcclxuICAgICAgICAgICAgbGV0IGFjY2VsZXJhdGlvbjpWZWN0b3IyID0gZm9yY2UudGltZXMoMS90aGlzLm1hc3MpO1xyXG4gICAgICAgICAgICB0aGlzLl92ZWxvY2l0eS5hZGQoYWNjZWxlcmF0aW9uLnRpbWVzKGRlbHRhVGltZSkpO1xyXG4gICAgICAgICAgICB0aGlzLl92ZWxvY2l0eS5jbGFtcChtYXhTcGVlZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uLmFkZCh0aGlzLl92ZWxvY2l0eS50aW1lcyhkZWx0YVRpbWUpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFB1dCBoYXJkIGxpbWl0IG9uIHdhbGxzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0IDw9IDApICAgICAgICAgICAge3RoaXMuX3ZlbG9jaXR5LnggPSAwOyB0aGlzLl9wb3NpdGlvbi54ID0gLXRoaXMuc2l6ZS54LzIgKyAxfSAvLyBMZWZ0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnQgPj0gY2FudmFzLndpZHRoKSAge3RoaXMuX3ZlbG9jaXR5LnggPSAwOyB0aGlzLl9wb3NpdGlvbi54ID0gY2FudmFzLndpZHRoICsgdGhpcy5zaXplLngvMiAtIDF9IC8vIFJpZ2h0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJvdHRvbSA8PSAwKSAgICAgICAgICAge3RoaXMuX3ZlbG9jaXR5LnkgPSAwOyB0aGlzLl9wb3NpdGlvbi55ID0gLXRoaXMuc2l6ZS55LzIgKyAxfSAvLyBUb3BcclxuICAgICAgICAgICAgaWYgKHRoaXMudG9wID49IGNhbnZhcy5oZWlnaHQpICB7dGhpcy5fdmVsb2NpdHkueSA9IDA7IHRoaXMuX3Bvc2l0aW9uLnkgPSBjYW52YXMuaGVpZ2h0ICsgdGhpcy5zaXplLnkvMiAtIDF9IC8vIEJvdHRvbVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdyhjdHg6Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTp2b2lkIHtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIC8vIGN0eC5yb3VuZFJlY3QoXHJcbiAgICAgICAgLy8gICAgIHRoaXMubGVmdCxcclxuICAgICAgICAvLyAgICAgdGhpcy50b3AsXHJcbiAgICAgICAgLy8gICAgIHRoaXMuX3NpemUueCxcclxuICAgICAgICAvLyAgICAgdGhpcy5fc2l6ZS55LFxyXG4gICAgICAgIC8vICAgICB0aGlzLm1pblNpemUgLyA1XHJcbiAgICAgICAgLy8gKTtcclxuICAgICAgICBjdHguZWxsaXBzZShcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24ueCxcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24ueSxcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZS54LzIsXHJcbiAgICAgICAgICAgIHRoaXMuX3NpemUueS8yLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAwLCAyKk1hdGguUElcclxuICAgICAgICApXHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTcHJpbmcge1xyXG4gICAgcHJvdGVjdGVkIGxlbmd0aDpudW1iZXIgPSAwO1xyXG4gICAgcHJvdGVjdGVkIHJlbGF0aXZlUG9zOlZlY3RvcjIgPSBuZXcgVmVjdG9yMigpO1xyXG4gICAgcHJvdGVjdGVkIGVsYXN0aWNGb3JjZTpWZWN0b3IyID0gbmV3IFZlY3RvcjIoKTtcclxuICAgIHByb3RlY3RlZCBkYW1waW5nRm9yY2U6VmVjdG9yMiA9IG5ldyBWZWN0b3IyKCk7XHJcbiAgICBwcm90ZWN0ZWQgZm9yY2U6VmVjdG9yMiA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRXaWR0aCA9IDEwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBtYXNzMTpNYXNzLCBwdWJsaWMgbWFzczI6TWFzcywgcHJvdGVjdGVkIG5hdHVyYWxMZW5ndGggPSAyMDAsIHByb3RlY3RlZCBzdGlmZm5lc3M6bnVtYmVyID0gMWUtNCwgcHJvdGVjdGVkIGRhbXBpbmc6bnVtYmVyID0gMWUtMykge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZvcmNlKGRhdHVtTWFzczpNYXNzKTpWZWN0b3IyIHtcclxuICAgICAgICBpZiAoZGF0dW1NYXNzID09PSB0aGlzLm1hc3MyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcmNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcmNlLnRpbWVzKC0xKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpOnZvaWQge1xyXG4gICAgICAgIHRoaXMucmVsYXRpdmVQb3MgPSB0aGlzLm1hc3MxLnBvc2l0aW9uLm1pbnVzKHRoaXMubWFzczIucG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5yZWxhdGl2ZVBvcy5sZW5ndGgoKTtcclxuICAgICAgICBsZXQgZGlyZWN0aW9uID0gdGhpcy5yZWxhdGl2ZVBvcy5ub3JtYWxpemVkKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRWxhc3RpY3NcclxuICAgICAgICB0aGlzLmVsYXN0aWNGb3JjZSA9IGRpcmVjdGlvbi50aW1lcygodGhpcy5sZW5ndGggLSB0aGlzLm5hdHVyYWxMZW5ndGgpICogdGhpcy5zdGlmZm5lc3MpXHJcblxyXG4gICAgICAgIC8vIERhbXBpbmdcclxuICAgICAgICBsZXQgcmVsYXRpdmVTcGVlZDpudW1iZXIgPSB0aGlzLm1hc3MxLnZlbG9jaXR5Lm1pbnVzKHRoaXMubWFzczIudmVsb2NpdHkpLmRvdChkaXJlY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuZGFtcGluZ0ZvcmNlID0gZGlyZWN0aW9uLnRpbWVzKHJlbGF0aXZlU3BlZWQgKiB0aGlzLmRhbXBpbmcpXHJcblxyXG4gICAgICAgIC8vIFRvdGFsIGZvcmNlXHJcbiAgICAgICAgdGhpcy5mb3JjZSA9IHRoaXMuZWxhc3RpY0ZvcmNlLnBsdXModGhpcy5kYW1waW5nRm9yY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KGN0eDpDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOnZvaWQge1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLm1hc3MxLnBvc2l0aW9uLngsIHRoaXMubWFzczEucG9zaXRpb24ueSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyh0aGlzLm1hc3MyLnBvc2l0aW9uLngsIHRoaXMubWFzczIucG9zaXRpb24ueSk7XHJcblxyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBNYXRoLm1pbih0aGlzLmRlZmF1bHRXaWR0aCAqIHRoaXMubmF0dXJhbExlbmd0aCAvIHRoaXMubGVuZ3RoLCB0aGlzLm1hc3MxLm1pblNpemUsIHRoaXMubWFzczIubWluU2l6ZSk7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ2dyYXknO1xyXG5cclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb250YWN0U3ByaW5nIGV4dGVuZHMgU3ByaW5nIHtcclxuICAgIHByaXZhdGUgaGVydHpFeHBvbmVudDpudW1iZXIgPSAyO1xyXG4gICAgcHJpdmF0ZSBwZW5hbHR5RXhwb25lbnQ6bnVtYmVyID0gLjU7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIG1hc3MxOk1hc3MsIHB1YmxpYyBtYXNzMjpNYXNzLCBwcm90ZWN0ZWQgbmF0dXJhbExlbmd0aDpudW1iZXIsIHByb3RlY3RlZCBzdGlmZm5lc3M6bnVtYmVyID0gMWUtNSwgcHJvdGVjdGVkIGRhbXBpbmc6bnVtYmVyID0gMWUtMikge1xyXG4gICAgICAgIHN1cGVyKG1hc3MyLCBtYXNzMSwgbmF0dXJhbExlbmd0aCwgc3RpZmZuZXNzLCBkYW1waW5nKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKTp2b2lkIHtcclxuICAgICAgICB0aGlzLnJlbGF0aXZlUG9zID0gdGhpcy5tYXNzMS5wb3NpdGlvbi5taW51cyh0aGlzLm1hc3MyLnBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMucmVsYXRpdmVQb3MubGVuZ3RoKCk7XHJcbiAgICAgICAgbGV0IGRpcmVjdGlvbiA9IHRoaXMucmVsYXRpdmVQb3Mubm9ybWFsaXplZCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5sZW5ndGggPCB0aGlzLm5hdHVyYWxMZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gRWxhc3RpY3NcclxuICAgICAgICAgICAgY29uc3QgaG9va2UgPSBNYXRoLnBvdyh0aGlzLm5hdHVyYWxMZW5ndGggLSB0aGlzLmxlbmd0aCwgdGhpcy5oZXJ0ekV4cG9uZW50KSAqIHRoaXMuc3RpZmZuZXNzO1xyXG4gICAgICAgICAgICBjb25zdCBwZW5hbHR5ID0gMSArIDEgLyBNYXRoLnBvdyh0aGlzLmxlbmd0aCwgdGhpcy5wZW5hbHR5RXhwb25lbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmVsYXN0aWNGb3JjZSA9IGRpcmVjdGlvbi50aW1lcyhob29rZSAqIHBlbmFsdHkpLnRpbWVzKC0xKTtcclxuXHJcbiAgICAgICAgICAgIC8vIERhbXBpbmdcclxuICAgICAgICAgICAgbGV0IHJlbGF0aXZlU3BlZWQ6bnVtYmVyID0gdGhpcy5tYXNzMS52ZWxvY2l0eS5taW51cyh0aGlzLm1hc3MyLnZlbG9jaXR5KS5kb3QoZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5kYW1waW5nRm9yY2UgPSBkaXJlY3Rpb24udGltZXMocmVsYXRpdmVTcGVlZCAqIHRoaXMuZGFtcGluZylcclxuXHJcbiAgICAgICAgICAgIC8vIFRvdGFsIGZvcmNlXHJcbiAgICAgICAgICAgIHRoaXMuZm9yY2UgPSB0aGlzLmVsYXN0aWNGb3JjZS5wbHVzKHRoaXMuZGFtcGluZ0ZvcmNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlID0gbmV3IFZlY3RvcjIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBEZW1vVHlwZSwgVmVjdG9yMiB9IGZyb20gXCIuL3V0aWxpdGllc1wiO1xyXG5pbXBvcnQgeyBNYXNzLCBTcHJpbmcsIENvbnRhY3RTcHJpbmcgfSBmcm9tIFwiLi9lbnRpdGllc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWUge1xyXG4gICAgcHJpdmF0ZSBjdHg6Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcHJpdmF0ZSBtb3VzZVBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcbiAgICBwcml2YXRlIGxhc3RUaW1lOm51bWJlcjsgLy8gbWlsbGlzZWNvbmRzXHJcbiAgICBwcml2YXRlIGRlbHRhVGltZTpudW1iZXI7IC8vIG1pbGxpc2Vjb25kc1xyXG4gICAgcHJpdmF0ZSBtYXhEZWx0YVRpbWU6bnVtYmVyID0gNTA7IC8vbWlsbGlzZWNvbmRzXHJcbiAgICBwcml2YXRlIG1hc3NlczpNYXNzW107XHJcbiAgICBwcml2YXRlIHNwcmluZ3M6U3ByaW5nW107XHJcbiAgICBwcml2YXRlIGVudGl0eVNwcmluZ3M6U3ByaW5nW107XHJcblxyXG4gICAgcHJpdmF0ZSBncmF2aXR5Om51bWJlciA9IDVlLTQ7IC8vIHBpeGVscy9tc2VjL21zZWNcclxuICAgIHByaXZhdGUgbWF4Rm9yY2U6bnVtYmVyID0gMWUtMTtcclxuICAgIHByaXZhdGUgbWF4U3BlZWQ6bnVtYmVyID0gMWU0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FudmFzOkhUTUxDYW52YXNFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5kZWx0YVRpbWUgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLm1hc3NlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3ByaW5ncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZW50aXR5U3ByaW5ncyA9IFtdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgYWRkTWFzcyhtYXNzOk1hc3MpOnZvaWQge1xyXG4gICAgICAgIHRoaXMubWFzc2VzLmZvckVhY2goZXhpc3RpbmdNYXNzID0+IHtcclxuICAgICAgICAgICAgbGV0IG5ld1NwcmluZyA9IG5ldyBDb250YWN0U3ByaW5nKGV4aXN0aW5nTWFzcywgbWFzcywgZXhpc3RpbmdNYXNzLm1heFNpemUvMiArIG1hc3MubWF4U2l6ZS8yKTtcclxuICAgICAgICAgICAgdGhpcy5lbnRpdHlTcHJpbmdzLnB1c2gobmV3U3ByaW5nKTtcclxuICAgICAgICAgICAgZXhpc3RpbmdNYXNzLmFkZEVudGl0eVNwcmluZyhuZXdTcHJpbmcpO1xyXG4gICAgICAgICAgICBtYXNzLmFkZEVudGl0eVNwcmluZyhuZXdTcHJpbmcpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5tYXNzZXMucHVzaChtYXNzKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhZGRTcHJpbmcoc3ByaW5nOlNwcmluZyk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5zcHJpbmdzLnB1c2goc3ByaW5nKTtcclxuICAgICAgICBcclxuICAgICAgICBzcHJpbmcubWFzczEuYWRkU3ByaW5nKHNwcmluZyk7XHJcbiAgICAgICAgc3ByaW5nLm1hc3MyLmFkZFNwcmluZyhzcHJpbmcpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgbW91c2VEb3duKGV2dDpNb3VzZUV2ZW50KTp2b2lkIHtcclxuICAgICAgICB0aGlzLm1vdXNlUG9zaXRpb24ueCA9IGV2dC54O1xyXG4gICAgICAgIHRoaXMubW91c2VQb3NpdGlvbi55ID0gZXZ0Lnk7XHJcblxyXG4gICAgICAgIC8vIFdvcmsgb3V0IHdoZXRoZXIgdGhlIG1vdXNlIGNsaWNrIHdhcyB3aXRoaW4gYW55IG9mIHRoZSBtYXNzZXNcclxuICAgICAgICBsZXQgbWFzc2VzVW5kZXJNb3VzZTpNYXNzW10gPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXNzZXMuZm9yRWFjaChtYXNzID0+IHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgbWFzcy5wb3NpdGlvbi54IC0gbWFzcy5zaXplLnggPD0gZXZ0LnggJiZcclxuICAgICAgICAgICAgICAgIG1hc3MucG9zaXRpb24ueCArIG1hc3Muc2l6ZS54ID49IGV2dC54ICYmXHJcbiAgICAgICAgICAgICAgICBtYXNzLnBvc2l0aW9uLnkgLSBtYXNzLnNpemUueSA8PSBldnQueSAmJlxyXG4gICAgICAgICAgICAgICAgbWFzcy5wb3NpdGlvbi55ICsgbWFzcy5zaXplLnkgPj0gZXZ0LnkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFzc2VzVW5kZXJNb3VzZS5wdXNoKG1hc3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgLy8gU2VsZWN0IG1hc3MgY2xvc2VzdCB0byBtb3VzZVxyXG4gICAgICAgIGlmIChtYXNzZXNVbmRlck1vdXNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGNsb3Nlc3RNYXNzOk1hc3MgPSBtYXNzZXNVbmRlck1vdXNlWzBdO1xyXG4gICAgICAgICAgICBsZXQgY2xvc2VzdE1hc3NEaXN0YW5jZTpudW1iZXIgPSBJbmZpbml0eTtcclxuXHJcbiAgICAgICAgICAgIG1hc3Nlc1VuZGVyTW91c2UuZm9yRWFjaChtYXNzID0+e1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubW91c2VQb3NpdGlvbi5taW51cyhtYXNzLnBvc2l0aW9uKS5sZW5ndGgoKSA8IGNsb3Nlc3RNYXNzRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0TWFzcyA9IG1hc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VzdE1hc3NEaXN0YW5jZSA9IHRoaXMubW91c2VQb3NpdGlvbi5taW51cyhtYXNzLnBvc2l0aW9uKS5sZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjbG9zZXN0TWFzcy5pc0JlaW5nRHJhZ2dlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNsb3Nlc3RNYXNzLnJlbGF0aXZlTW91c2VQb3NpdGlvbiA9IHRoaXMubW91c2VQb3NpdGlvbi5taW51cyhjbG9zZXN0TWFzcy5wb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIG1vdXNlTW92ZShldnQ6TW91c2VFdmVudCk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5tb3VzZVBvc2l0aW9uLnggPSBldnQueDtcclxuICAgICAgICB0aGlzLm1vdXNlUG9zaXRpb24ueSA9IGV2dC55O1xyXG4gICAgfVxyXG4gICAgcHVibGljIG1vdXNlVXAoZXZ0Ok1vdXNlRXZlbnQpOnZvaWQge1xyXG4gICAgICAgIHRoaXMubWFzc2VzLmZvckVhY2gobWFzcyA9PiBtYXNzLmlzQmVpbmdEcmFnZ2VkID0gZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgY3JlYXRlRGVtbyh0eXBlOkRlbW9UeXBlKTp2b2lkIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gRGVtb1R5cGUuVHJpYW5nbGUpIHtcclxuICAgICAgICAgICAgbGV0IG1hc3MxID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoMTUsIDMwKSk7XHJcbiAgICAgICAgICAgIGxldCBtYXNzMiA9IG5ldyBNYXNzKG5ldyBWZWN0b3IyKDMwLCAzMDApKTtcclxuICAgICAgICAgICAgbGV0IG1hc3MzID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoMzAwLCAzMCkpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZE1hc3MobWFzczEpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZE1hc3MobWFzczIpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZE1hc3MobWFzczMpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNwcmluZzEgPSBuZXcgU3ByaW5nKG1hc3MxLCBtYXNzMik7XHJcbiAgICAgICAgICAgIGxldCBzcHJpbmcyID0gbmV3IFNwcmluZyhtYXNzMiwgbWFzczMpO1xyXG4gICAgICAgICAgICBsZXQgc3ByaW5nMyA9IG5ldyBTcHJpbmcobWFzczEsIG1hc3MzKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nMSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzIpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNwcmluZyhzcHJpbmczKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSBEZW1vVHlwZS5QYXJhbGxlbG9ncmFtKSB7XHJcbiAgICAgICAgICAgIGxldCBtYXNzMSA9IG5ldyBNYXNzKG5ldyBWZWN0b3IyKDMwLCAzMCkpO1xyXG4gICAgICAgICAgICBsZXQgbWFzczIgPSBuZXcgTWFzcyhuZXcgVmVjdG9yMigzMCwgMzAwKSk7XHJcbiAgICAgICAgICAgIGxldCBtYXNzMyA9IG5ldyBNYXNzKG5ldyBWZWN0b3IyKDMwMCwgMzApKTtcclxuICAgICAgICAgICAgbGV0IG1hc3M0ID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoMzAwLCAzMDApKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3MxKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3MyKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3MzKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3M0KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzcHJpbmcxID0gbmV3IFNwcmluZyhtYXNzMSwgbWFzczIpO1xyXG4gICAgICAgICAgICBsZXQgc3ByaW5nMiA9IG5ldyBTcHJpbmcobWFzczIsIG1hc3MzKTtcclxuICAgICAgICAgICAgbGV0IHNwcmluZzMgPSBuZXcgU3ByaW5nKG1hc3MxLCBtYXNzMyk7XHJcbiAgICAgICAgICAgIGxldCBzcHJpbmc0ID0gbmV3IFNwcmluZyhtYXNzMywgbWFzczQpO1xyXG4gICAgICAgICAgICBsZXQgc3ByaW5nNSA9IG5ldyBTcHJpbmcobWFzczIsIG1hc3M0KTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nMSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzIpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNwcmluZyhzcHJpbmczKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nNCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09IERlbW9UeXBlLlNxdWFyZSkge1xyXG4gICAgICAgICAgICBsZXQgbWFzczEgPSBuZXcgTWFzcyhuZXcgVmVjdG9yMigzMCwgMzApKTtcclxuICAgICAgICAgICAgbGV0IG1hc3MyID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoMzAsIDMwMCkpO1xyXG4gICAgICAgICAgICBsZXQgbWFzczMgPSBuZXcgTWFzcyhuZXcgVmVjdG9yMigzMDAsIDMwKSk7XHJcbiAgICAgICAgICAgIGxldCBtYXNzNCA9IG5ldyBNYXNzKG5ldyBWZWN0b3IyKDMwMCwgMzAwKSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTWFzcyhtYXNzMSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTWFzcyhtYXNzMik7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTWFzcyhtYXNzMyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTWFzcyhtYXNzNCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3ByaW5nMSA9IG5ldyBTcHJpbmcobWFzczEsIG1hc3MyKTtcclxuICAgICAgICAgICAgbGV0IHNwcmluZzIgPSBuZXcgU3ByaW5nKG1hc3MxLCBtYXNzNCwgMjAwKk1hdGguc3FydCgyKSk7XHJcbiAgICAgICAgICAgIGxldCBzcHJpbmczID0gbmV3IFNwcmluZyhtYXNzMiwgbWFzczQpO1xyXG4gICAgICAgICAgICBsZXQgc3ByaW5nNCA9IG5ldyBTcHJpbmcobWFzczMsIG1hc3M0KTtcclxuICAgICAgICAgICAgbGV0IHNwcmluZzUgPSBuZXcgU3ByaW5nKG1hc3MxLCBtYXNzMyk7XHJcbiAgICAgICAgICAgIGxldCBzcHJpbmc2ID0gbmV3IFNwcmluZyhtYXNzMiwgbWFzczMsIDIwMCpNYXRoLnNxcnQoMikpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNwcmluZyhzcHJpbmcxKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nMik7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzMpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNwcmluZyhzcHJpbmc0KTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nNSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09IERlbW9UeXBlLkNlbnRlcmVkU3F1YXJlKSB7XHJcbiAgICAgICAgICAgIGxldCBtYXNzMSA9IG5ldyBNYXNzKG5ldyBWZWN0b3IyKDMwLCAzMCkpO1xyXG4gICAgICAgICAgICBsZXQgbWFzczIgPSBuZXcgTWFzcyhuZXcgVmVjdG9yMigzMCwgMzAwKSk7XHJcbiAgICAgICAgICAgIGxldCBtYXNzMyA9IG5ldyBNYXNzKG5ldyBWZWN0b3IyKDMwMCwgMzApKTtcclxuICAgICAgICAgICAgbGV0IG1hc3M0ID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoMzAwLCAzMDApKTtcclxuICAgICAgICAgICAgbGV0IG1hc3M1ID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoMTUwLCAxNTApKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3MxKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3MyKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3MzKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3M0KTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG1hc3M1KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzcHJpbmcxID0gbmV3IFNwcmluZyhtYXNzMSwgbWFzczIpO1xyXG4gICAgICAgICAgICBsZXQgc3ByaW5nMiA9IG5ldyBTcHJpbmcobWFzczEsIG1hc3MzKTtcclxuICAgICAgICAgICAgbGV0IHNwcmluZzMgPSBuZXcgU3ByaW5nKG1hc3MyLCBtYXNzNCk7XHJcbiAgICAgICAgICAgIGxldCBzcHJpbmc0ID0gbmV3IFNwcmluZyhtYXNzMywgbWFzczQpO1xyXG4gICAgICAgICAgICBsZXQgc3ByaW5nNSA9IG5ldyBTcHJpbmcobWFzczEsIG1hc3M1LCAxMDAqTWF0aC5zcXJ0KDIpKTtcclxuICAgICAgICAgICAgbGV0IHNwcmluZzYgPSBuZXcgU3ByaW5nKG1hc3MyLCBtYXNzNSwgMTAwKk1hdGguc3FydCgyKSk7XHJcbiAgICAgICAgICAgIGxldCBzcHJpbmc3ID0gbmV3IFNwcmluZyhtYXNzMywgbWFzczUsIDEwMCpNYXRoLnNxcnQoMikpO1xyXG4gICAgICAgICAgICBsZXQgc3ByaW5nOCA9IG5ldyBTcHJpbmcobWFzczQsIG1hc3M1LCAxMDAqTWF0aC5zcXJ0KDIpKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nMSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzIpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNwcmluZyhzcHJpbmczKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nNCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzUpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNwcmluZyhzcHJpbmc2KTtcclxuICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcoc3ByaW5nNyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKHNwcmluZzgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSBEZW1vVHlwZS5IZXhhZ29uKSB7XHJcbiAgICAgICAgICAgIGxldCBjZW50ZXJNYXNzID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoNDAwLCA0MDApKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRNYXNzKGNlbnRlck1hc3MpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGVkZ2VNYXNzZXM6TWFzc1tdID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdNYXNzID0gbmV3IE1hc3MobmV3IFZlY3RvcjIoMzAwICsgMTUwKk1hdGguY29zKGkqTWF0aC5QSS8zKSwgMzAwICsgMTUwKk1hdGguc2luKGkqTWF0aC5QSS8zKSkpO1xyXG4gICAgICAgICAgICAgICAgZWRnZU1hc3Nlcy5wdXNoKG5ld01hc3MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRNYXNzKG5ld01hc3MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTcHJpbmcobmV3IFNwcmluZyhlZGdlTWFzc2VzW2ldLCBlZGdlTWFzc2VzWyhpKzEpICUgNl0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkU3ByaW5nKG5ldyBTcHJpbmcoZWRnZU1hc3Nlc1tpXSwgY2VudGVyTWFzcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGFydCgpOnZvaWQge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm1haW5Mb29wLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBtYWluTG9vcChjdXJyZW50VGltZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgIHRoaXMuZGVsdGFUaW1lID0gTWF0aC5taW4oY3VycmVudFRpbWUgLSB0aGlzLmxhc3RUaW1lLCB0aGlzLm1heERlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IGN1cnJlbnRUaW1lO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLmRlbHRhVGltZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5kcmF3KCk7XHJcblxyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm1haW5Mb29wLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSB1cGRhdGUoZGVsdGFUaW1lOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5tYXNzZXMuZm9yRWFjaCgobWFzcykgPT4gbWFzcy51cGRhdGUodGhpcy5jYW52YXMsIGRlbHRhVGltZSwgdGhpcy5tb3VzZVBvc2l0aW9uLCB0aGlzLm1hc3NlcywgdGhpcy5ncmF2aXR5LCB0aGlzLm1heEZvcmNlLCB0aGlzLm1heFNwZWVkKSk7XHJcbiAgICAgICAgdGhpcy5zcHJpbmdzLmZvckVhY2goKHNwcmluZykgPT4gc3ByaW5nLnVwZGF0ZSgpKTtcclxuICAgICAgICB0aGlzLmVudGl0eVNwcmluZ3MuZm9yRWFjaCgoc3ByaW5nKSA9PiBzcHJpbmcudXBkYXRlKCkpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBkcmF3KCk6dm9pZCB7XHJcbiAgICAgICAgLy8gQ2xlYXIgc2NyZWVuXHJcbiAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICB0aGlzLnNwcmluZ3MuZm9yRWFjaCgoc3RyaW5nKSA9PiBzdHJpbmcuZHJhdyh0aGlzLmN0eCkpO1xyXG4gICAgICAgIHRoaXMubWFzc2VzLmZvckVhY2goKG1hc3MpID0+IG1hc3MuZHJhdyh0aGlzLmN0eCkpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4vdXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IEdhbWUgfSBmcm9tIFwiLi9nYW1lXCI7XHJcblxyXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuXHJcbmZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpOiB2b2lkIHtcclxuICAgIGNhbnZhcy53aWR0aCAgPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMpXHJcbnJlc2l6ZUNhbnZhcygpXHJcblxyXG5cclxuY29uc3QgZ2FtZSA9IG5ldyBHYW1lKGNhbnZhcyk7XHJcblxyXG5jYW52YXMub25tb3VzZWRvd24gPSBnYW1lLm1vdXNlRG93bi5iaW5kKGdhbWUpO1xyXG5jYW52YXMub25tb3VzZW1vdmUgPSBnYW1lLm1vdXNlTW92ZS5iaW5kKGdhbWUpO1xyXG5jYW52YXMub25tb3VzZXVwID0gZ2FtZS5tb3VzZVVwLmJpbmQoZ2FtZSk7XHJcblxyXG5jb25zdCByYW5kRW51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE9iamVjdC5rZXlzKERlbW9UeXBlKS5sZW5ndGggLyAyKVxyXG4vLyBnYW1lLmNyZWF0ZURlbW8ocmFuZEVudW0pO1xyXG5nYW1lLmNyZWF0ZURlbW8oRGVtb1R5cGUuSGV4YWdvbik7XHJcblxyXG5nYW1lLnN0YXJ0KCk7XHJcbiJdLCJuYW1lcyI6WyJEZW1vVHlwZSIsIngiLCJ5IiwiYWRkIiwidmVjdG9yIiwidGhpcyIsInN1YnRyYWN0IiwibXVsdGlwbHlCeSIsInNjYWxhciIsIm5vcm1hbGl6ZSIsImxlbmd0aCIsInBsdXMiLCJWZWN0b3IyIiwibWludXMiLCJ0aW1lcyIsIk1hdGgiLCJzcXJ0IiwicG93Iiwibm9ybWFsaXplZCIsImRvdCIsImNsYW1wIiwibWFnbml0dWRlIiwiY29weSIsIl9wb3NpdGlvbiIsIm1hc3MiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwiX3NpemUiLCJkcmFnQ29lZmZpY2llbnQiLCJpc0JlaW5nRHJhZ2dlZCIsInJlbGF0aXZlTW91c2VQb3NpdGlvbiIsInNwcmluZ3MiLCJlbnRpdHlTcHJpbmdzIiwiX3ZlbG9jaXR5IiwibWluIiwibWF4IiwiYWRkU3ByaW5nIiwic3ByaW5nIiwicHVzaCIsImFkZEVudGl0eVNwcmluZyIsInVwZGF0ZSIsImNhbnZhcyIsImRlbHRhVGltZSIsIm1vdXNlUG9zaXRpb24iLCJtYXNzZXMiLCJncmF2aXR5IiwibWF4Rm9yY2UiLCJtYXhTcGVlZCIsIm9sZFBvc2l0aW9uIiwiZm9yRWFjaCIsImdldEZvcmNlIiwid2FsbFNwcmluZ3MiLCJsZWZ0IiwiQ29udGFjdFNwcmluZyIsIk1hc3MiLCJyaWdodCIsIndpZHRoIiwidG9wIiwiYm90dG9tIiwiaGVpZ2h0IiwiYWNjZWxlcmF0aW9uIiwic2l6ZSIsImRyYXciLCJjdHgiLCJzdHJva2VTdHlsZSIsImJlZ2luUGF0aCIsImVsbGlwc2UiLCJQSSIsImZpbGwiLCJtYXNzMSIsIm1hc3MyIiwibmF0dXJhbExlbmd0aCIsInJlbGF0aXZlUG9zIiwiZWxhc3RpY0ZvcmNlIiwiZGFtcGluZ0ZvcmNlIiwiZm9yY2UiLCJkZWZhdWx0V2lkdGgiLCJkYXR1bU1hc3MiLCJwb3NpdGlvbiIsImRpcmVjdGlvbiIsInJlbGF0aXZlU3BlZWQiLCJ2ZWxvY2l0eSIsIm1vdmVUbyIsImxpbmVUbyIsImxpbmVXaWR0aCIsIm1pblNpemUiLCJzdHJva2UiLCJoZXJ0ekV4cG9uZW50IiwicGVuYWx0eUV4cG9uZW50IiwiaG9va2UiLCJwZW5hbHR5IiwiU3ByaW5nIiwibWF4RGVsdGFUaW1lIiwiZ2V0Q29udGV4dCIsImxhc3RUaW1lIiwiYWRkTWFzcyIsImV4aXN0aW5nTWFzcyIsIm5ld1NwcmluZyIsIm1heFNpemUiLCJtb3VzZURvd24iLCJldnQiLCJtYXNzZXNVbmRlck1vdXNlIiwiSW5maW5pdHkiLCJtb3VzZU1vdmUiLCJtb3VzZVVwIiwiY3JlYXRlRGVtbyIsInR5cGUiLCJUcmlhbmdsZSIsIm1hc3MzIiwic3ByaW5nMSIsInNwcmluZzIiLCJzcHJpbmczIiwiUGFyYWxsZWxvZ3JhbSIsIm1hc3M0Iiwic3ByaW5nNCIsInNwcmluZzUiLCJTcXVhcmUiLCJzcHJpbmc2IiwiQ2VudGVyZWRTcXVhcmUiLCJtYXNzNSIsInNwcmluZzciLCJzcHJpbmc4IiwiSGV4YWdvbiIsImNlbnRlck1hc3MiLCJlZGdlTWFzc2VzIiwiaSIsIm5ld01hc3MiLCJjb3MiLCJzaW4iLCJzdGFydCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1haW5Mb29wIiwiYmluZCIsImN1cnJlbnRUaW1lIiwiY2xlYXJSZWN0Iiwic3RyaW5nIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlc2l6ZUNhbnZhcyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImFkZEV2ZW50TGlzdGVuZXIiLCJnYW1lIiwiR2FtZSIsIm9ubW91c2Vkb3duIiwib25tb3VzZW1vdmUiLCJvbm1vdXNldXAiLCJmbG9vciIsInJhbmRvbSIsIk9iamVjdCIsImtleXMiXSwic291cmNlUm9vdCI6IiJ9